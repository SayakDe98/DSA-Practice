Inversion Count
Given an array containing integers, you need to
count the total number of inversions.

Inversion Two elements a[i] and a[j] form an inversion if 
a[i] > a[j] and i < j

Sample Input
[0, 5, 2, 3, 1]

Sample Output
5

There is no inversion pair for 0.
5's inversion pairs: (5, 2), (5, 3), (5, 1) -> 3
2's inversion pairs: (2, 1) -> 1
3's inversion pairs: (3,1) -> 1
There is no inversion pair for 1.

Brute Force O(n ^ 2)
Compare every element at i with all elements which are coming after it.
For 0 iterate 5,2,3,1
For 5 iterate 2,3,1
For 2 iterate 3,1
For 3 iterate 1

Calculate how many inversions each element will form.
Divide and conquer(d & c): perform inversions in first half and then perform in 2nd half
Total number of inversions = number of inversions in 1st half, c1 + number of inversions in 2nd half, c2 + number of inversions requried which are to be performed between 1st and 2nd half, cross_inversion

c1 = (5,2) = 1,
c2 = (3,1) = 1,
cross_inversion = (5,3), (5,1), (2,1) = 3

Total Inversions = c1 + c2 + cross_inversion = 5
We can perform merge sort here.
0,5,2,3,1
|       |
0,5,2   3,1
|   |   | |
0,5 2   3 1
| | |    |(1 inv.)
0 5 2   1,3 
 |  |     |
0,5 2     |  
   |1 inv.| 
0,2,5     |
   |      |
   --------
       | (3 inv.) ->(2,1),(5,1),(5,3)
    0,1,2,3,5   
Total Inversions = 5 
